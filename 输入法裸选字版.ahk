;疯狂输入法,哈哈哈.....
;快捷键说明 Lshift:切换中英文输入 F1:切换单字模式 翻页按钮: 逗号句号,-号=号 中文状态下切换中英文标点:ctrl+句号
;翻页键直接进入选字状态，空格选中第一个词并进入选字状态，其他标点符号也可以进入选字状态
;选字状态中backspace删除已确认文字,delete删除未确认拼音
#singleinstance force
#NoEnv
SetTitleMatchMode 2
DetectHiddenWindows, On
SetWinDelay, 0
CoordMode,caret,screen
menu,tray,icon,.\图标文件.icl,1						;拖盘图标,来自影子输入法,觉得图标字体很好看,借用一下

;双拼编码, 设置文件在双拼编码文件夹下,若没有则到双拼编码文件夹中去建(文件后缀为txt,非ini,注意)
;可用的有智能ABC,微软拼音,拼音加加,紫光拼音,搜狗拼音,自然码,小鹤双拼,自行修改
双拼编码:="智能ABC"
#include 双拼编码映射.ahk

中文下启用英文标点:=0							;1为启用,0为禁用.快捷键为ctrl+.
;单字模式:=0								;快捷键为f1
小词典:=0
输入法开关:=1								;初始打开中文
;自动进入选字模式时间:=500						;两个字母时，自动进入选字的时间，单位为毫秒，越小越灵敏，小心使用。

显示字体 := "华文细黑"							;字体调整过后,排版可能会有些问题,请在下面调分割符和窗口高度宽度
if(显示字体=="华文细黑"){
	选字窗分割符:="--------------------------------------------------------------------`n"
	选字窗高度:=160, 选字窗宽度:=520
}else if(显示字体=="微软雅黑"){
	选字窗分割符:="----------------------------------------------------`n"
	选字窗高度:=170, 选字窗宽度:=520
}else{
	选字窗分割符:="----------------------------------------------`n"
	选字窗高度:=140, 选字窗宽度:=540
}

if(!小词典){
	词频拼音表1 :=生成音词表(".\词典\正常词典1.txt")
	词频拼音表2 :=生成音词表(".\词典\正常词典2.txt")			;影子输入法拼音词典,(ahk关联数组超过24万,内存载入好像就变慢,所以切分成两个词典)
}else 词频拼音表1 :=生成音词表(".\词典\小词典.txt")
字母选字键:="qwertyuiopasdfghjklzxcvbnm"				;所有的字母选字键
数字选字键:="1234567890"							;所有的数字选字键
数字选字键组:=strSplit(数字选字键)
字母选字键组:=strSplit(字母选字键)
中文标点 :={",":"，"  ,  ".":"。"  , ";":"；"  ,  "/":"、" , "+1":"！" , "+2":"@" 
		, "+3":"#" ,"+4":"￥" , "+5":"%" , "+6":"……" , "+7":"&" 
		, "+8":"*" , "+9":"（" , "+0":"）" ,  "+,":"《" , "+.":"》" 
		, "+/":"？" , "[":"【" , "]":"】" , "+;":"：" }			;此处包含除了引号之外的中文标点
英文括号按键:={"+9":"(){left}", "+,":"<>{left}",  "[":"[]{left}"			;简化括号的发送问题
		,  "+[":"{{}{}}{left}", "+'":"""""{left}"}
引号已发送:=1								;解决双引号问题
已确认文字:= 插入字符:= 待转化字符 := 句末标点 :=gb词典字串 :=常用词典字串:=""
字母键到字表 :={}, 数字键到词表 :={}
上翻页键 := "-[,", 下翻页键 := "=]."
翻页数:=0, 需重建窗口:=1, 选字状态:=0

#include 获取光标位置.ahk						;调用的函数文件放在这一块

#if

^.::
if(中文下启用英文标点:=!中文下启用英文标点){
	tooltip,英文标点,%A_caretx% ,%A_carety% 
}else	tooltip,中文标点,%A_caretx% ,%A_carety% 
settimer,关闭tooltip,-1000
return

~Lshift::
keywait,shift,t0.15							;用此句修正和其他的按键冲突
if errorlevel
	return
获取光标位置()
if (输入法开关:=!输入法开关){						;切换中英文
	tooltip, 中,光标位置.x,光标位置.y
	menu,tray,icon,.\图标文件.icl,1
}else{
	if(strlen(待转化字符)>1)						
		send,% 已确认文字 . 待转化字符
	输入置空()
	tooltip,EN,光标位置.x,光标位置.y
	menu,tray,icon,.\图标文件.icl,2					;清空已记录输入
}
setTimer,关闭tooltip,-1000
return

关闭tooltip:
tooltip
return

#Include 注册输入键.ahk
setTimer,超时进入选字状态,off
if(instr(A_thisHotKey,"$")){
	按键 :=subStr(A_thisHotKey,2)					;去除热键$符号,获取热键
}else 按键:=A_thisHotKey
if(输入法开关 && 获取光标位置().类型!="mouse"){
	中文输入(按键)
}else 原义发送(按键)
return

超时进入选字状态:
	选字状态:=1
	gosub,判断发送上屏
return

原义发送(按键){
	global 英文括号按键
	if (按键=="space"||按键=="backspace"||按键=="enter" ||按键=="esc"||按键=="tab"||按键=="delete" ){
		send,{%按键%}						;特殊按键发送要用 {%按键%}，普通按键发送要用% 按键
	}else if(英文括号按键["" . 按键]){					;简化括号，发送方便打括号
		send,% 英文括号按键["" . 按键]
	}else send,% 按键
}

;输入法核心步骤
中文输入(按键){
	local 选中字,选中词
	if (Strlen(插入字符)==0 && strLen(待转化字符)==0 && !instr(字母选字键,按键) && 按键!="+'"){		;处理非打字状态下的特殊按键，包括符号，排除引号
		if(!中文下启用英文标点 && 中文标点["" . 按键]){
			send,% 中文标点["" . 按键]			;强制转换按键为字符类型，只有这个古怪的语法起作用-_-||……,
		}else 原义发送(按键)
		return
	}else if(instr(数字选字键,按键) ||按键=="space"||按键=="tab"||中文标点["" . 按键]){			;数字及空格等选字键
		if(中文标点["" . 按键]){
			if(instr(下翻页键,按键)||instr(上翻页键,按键) ){	;若标点为句号或逗号，则进行翻页
				if (选字状态) {			
					if(instr(下翻页键,按键)){
						翻页数+=1
					}else if(instr(上翻页键,按键) && 翻页数!=0){
						翻页数-=1
					}
				}else 句末标点 := 中文标点["" . 按键]
			}else 句末标点 := 中文标点["" . 按键]		;非翻页标点,则进入选字
			选字状态:=1
			gosub,判断发送上屏
			return
		}
		选字状态:=1
		if(按键=="tab"){
		}else if(按键=="space") {
			选中词:=数字键到词表[1]
		}else 选中词:=数字键到词表[按键]
		if(选中词){
			已确认文字.=选中词
			翻页数:=0
			if(strlen(插入字符)>0){
				插入字符:=substr(插入字符,strlen(选中词)*2+1)
				if(strlen(插入字符)==0){
					插入状态:=0
					产生字串(待转化字符)
				}else 产生字串(插入字符)
			}else {
				待转化字符:=substr(待转化字符,strlen(选中词)*2+1)
				产生字串(待转化字符)
			}
		}
		gosub,判断发送上屏
		return
	}else if(instr(下翻页键,按键)||instr(上翻页键,按键)){		;翻页
		if(选字状态){
			if (instr(下翻页键,按键)){
				翻页数+=1
			}else if(翻页数!=0){					;上翻页
				翻页数-=1
			}else return
		}
		选字状态:=1, 产生候选()
	}else if(按键=="+'"){						;处理引号
		if(strLen(待转化字符)==0){
			if(中文下启用英文标点){
				原义发送(按键)
			}else if(引号已发送:=!引号已发送){
				send,”
			}else send,“
		}						
	}else if(按键=="esc"){						;做取消操作
		输入置空()
	}else if(按键=="enter"){						;直接按键上屏
		send,% 已确认文字 . 插入字符 . 待转化字符 . 句末标点
		输入置空()
	}else if(按键=="backspace" ||按键=="delete"){			;做删除操作
		gosub,删除操作
	}else if(!选字状态){						;接下来是字母选字键区
		if(插入状态){
			插入字符.=按键,	产生字串(插入字符)
		}else	待转化字符 .= 按键, 产生字串(待转化字符)
		产生候选()
	}else if(选字状态){						;输入法的四个状态：输入状态，选字状态，插入中输入状态，插入中选字状态
		选中字:=字母键到字表[按键]				;好晕@_@
		if(选中字){
			已确认文字.=选中字, 翻页数:=0
			if(strlen(插入字符)>0){
				插入字符:=substr(插入字符,strlen(选中字)*2+1)
				if(strlen(插入字符)==0){
					插入状态:=0, 产生字串(待转化字符)		;插入选字状态结束，继续转化剩余字串
				}else 产生字串(插入字符)
			}else{
				待转化字符:=substr(待转化字符,strlen(选中字)*2+1), 产生字串(待转化字符)
			}
			gosub,判断发送上屏
		}
	}
	return

删除操作:
	if(插入状态){
		if(按键=="backspace"){
			if(strlen(插入字符)>0){				;插入状态中删除
				插入字符 := subStr(插入字符,1,-1)
				if (strlen(插入字符)>0){
					产生字串(插入字符), 产生候选()
					return
				}
			}
			已确认文字:=substr(已确认文字,1,-1)
		}else if(按键=="delete")
			待转化字符 := subStr(待转化字符,2)		;删除剩余字符的句首字母
	}else if (strlen(已确认文字)>0){	
		if(按键=="backspace"){					;刚进入插入状态
			已确认文字:=substr(已确认文字,1,-1)
		}else if(按键=="delete")
			待转化字符 := subStr(待转化字符,3)
		选字状态:=0, 插入状态:=1
	}else if(按键=="backspace")					;非插入状态
		待转化字符 := subStr(待转化字符,1,-1)
	if(strlen(插入字符)!=0){
		产生字串(插入字符),产生候选()
	}else if(strlen(待转化字符)!=0){
		产生字串(待转化字符),产生候选()
	}else{
		send,% 已确认文字 . 句末标点
		输入置空()
	}
	return
}

判断发送上屏:
	if(strlen(待转化字符)==0){
		SendInput,% 已确认文字 . 句末标点
		输入置空()
	}else 产生候选()
return

产生字串(原字符){
	global 常用词典字串,词频拼音表1,词频拼音表2,双拼编码
	待转化字符:=双拼转换(原字符, 双拼编码)
	常用词典字串:=""
	if(strlen(待转化字符)==1){
		if(词频拼音表1[待转化字符]){
			常用词典字串 .= 词频拼音表1[待转化字符]			
		}else 常用词典字串 .= 词频拼音表2[待转化字符]
		return
	}
	while (strlen(待转化字符)>=2){
		if(mod(strlen(待转化字符),2)==0){		
			if(词频拼音表1[待转化字符]){
				新字串:=词频拼音表1[待转化字符]
			}else 新字串:=词频拼音表2[待转化字符]
			if(常用词典字串 && 新字串)
				常用词典字串 .= ","
			常用词典字串 .= 新字串
			待转化字符:=substr(待转化字符,1,-2)
		}else	待转化字符:=substr(待转化字符,1,-1)
	}
}

输入置空(){
	global
	Winhide,疯狂输入法选字框
	需重建窗口:=1
	已确认文字:=插入字符 := 待转化字符 := 句末标点 :=""
	插入状态:=选字状态:=翻页数:=0
	字母键到字表 :={}
}

生成音词表(词典路径){							;词典每行格式 拼音\t词,词 
	fileread,已读文件,%词典路径%
	待返回音词表:={}						;哈希数组需要初始化!!!!!!!!
	loop,parse,已读文件,`n, `r 
	{
		当前行 :=A_LoopField
		loop,parse,当前行,%a_tab%
		{
				if(当前行=="")
					continue
				 if(A_index==1)
					拼音 := a_loopfield
				if (A_index==2)
					待返回音词表[拼音] :=a_loopfield	;提取gb词典字串
		}
		if(mod(a_index,1000) ==0){
			行数:=A_index
			if(词典路径==".\词典\正常词典2.txt"){
				行数+=200000,
				tooltip,正在载入词典%行数%行.......
			}else	tooltip,正在载入词典%行数%行.......
		}
	}
	tooltip,已载入词典.......
	setTimer,关闭tooltip,-300
	已读文件:=""
	return 待返回音词表
}

产生候选(){
	local 显示输入字串,显示候选字串,词频词组
	显示输入字串 .= 已确认文字 . 插入字符
	if(插入状态){
		显示输入字串 .="_" . 待转化字符 . 句末标点
	}else 显示输入字串 .= 待转化字符 . "_"  . 句末标点
	词频词组 :=strSplit(常用词典字串,",")
	for 序号,值 in 数字选字键组{
		字:=数字键到词表[值] :=词频词组[序号+翻页数*(strlen(数字选字键)+strlen(字母选字键))]		;数字做键,词做值
		显示候选字串 .= 值 . "." 
		if (!字){
			显示候选字串 .= "　"
		}else 显示候选字串 .= 字 
		if (序号==strlen(数字选字键)){
			显示候选字串 .= "`n"
		}else 显示候选字串 .=  " "
	}

;构造字母选字项	
	if(!选字状态){
		gosub,显示候选框
		return
	}
	显示候选字串 .=选字窗分割符
	for 序号,值 in 字母选字键组
	{
		字母键到字表[值]:=词频词组[序号+strlen(数字选字键)+翻页数*(strlen(数字选字键)+strlen(字母选字键))]	;字母做键,字做值
		字 :=字母键到字表[值]
		显示候选字串 .= 值 . "."
		if (!字){
			显示候选字串 .= "　"
		}else 显示候选字串 .= 字 
		if (序号==10){
			显示候选字串 .= "`n　" 
		}else if (序号==19){
			显示候选字串 .= "　　`n" 
		} if (序号==26){
			显示候选字串 .= "　　" 
		}else 显示候选字串 .=  " "
	}
	gosub,显示候选框
	return
显示候选框:
	光标位置 :=获取光标位置()
	winget,活动窗口id,ID,A	
	if(绑定窗口id!=活动窗口id){
		Gui, 疯狂输入法选字框:+owner%活动窗口id%		;关键命令, 绑定输入法的窗口到活动窗口,不绑定好像容易出错
		绑定窗口id :=活动窗口id	
	}
	if(需重建窗口){ 						
		if(光标位置.x<A_ScreenWidth -选字窗宽度){
			窗口x :=光标位置.x
		}else	窗口x :=A_ScreenWidth -选字窗宽度
		if(光标位置.y<A_ScreenHeight-选字窗高度){
			窗口y :=光标位置.y
		}else	窗口y :=A_ScreenHeight -选字窗高度
		SplashImage,,x%窗口x% y%窗口y% b1 h60 w%选字窗宽度% c10 fm14 fs14 wm400 ws400
				,%显示候选字串%,%显示输入字串%,疯狂输入法选字框,%显示字体%
		需重建窗口:=0
	}else{ 
		SplashImage,,,%显示候选字串%,%显示输入字串%,疯狂输入法选字框
		if(字母键到字表["q"]){
			WinMove, 疯狂输入法选字框, , , , , %选字窗高度%
		}else if(!选字状态){
			宽度:=(strlen(显示候选字串)-4*strlen(数字选字键))*8+选字窗宽度
			WinMove, 疯狂输入法选字框, , , , %宽度%
		}
;		ControlSetText , static1, %显示输入字串%, 疯狂输入法选字框	
;		ControlSetText , static2, %显示候选字串%, 疯狂输入法选字框
	}

return
}

^esc::exitapp								;ctrl+esc强制退出输入法