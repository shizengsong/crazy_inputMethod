;疯狂输入法,哈哈哈.....
;快捷键说明:
;Lshift:切换中英文输入 F1:切换单字模式 
;翻页按钮: 逗号句号,-号=号 
;中文状态下切换中英文标点:ctrl+句号
;翻页键直接进入选字状态，空格选中第一个词并进入选字状态，其他标点符号也可以进入选字状态
;非单字模式下,在输入三个字符的情况下,按 逗号或句号或tab键 可以盲打出字(例如dee加句号，将打出“的”字，ler加句号，会打出“了”字)
;选字状态中backspace删除已确认文字,delete删除未确认拼音
#singleinstance force
#NoEnv
SetTitleMatchMode 2
DetectHiddenWindows, On
SetWinDelay, 0
CoordMode,caret,screen
menu,tray,icon,.\图标文件.icl,1						;拖盘图标,来自影子输入法,觉得图标字体很好看,借用一下

;双拼编码, 设置文件在双拼编码文件夹下,若没有则到双拼编码文件夹中去建(文件后缀为txt,非ini,注意)
;可用的有智能ABC,微软拼音,拼音加加,紫光拼音,搜狗拼音,自然码,小鹤双拼,自行修改
双拼编码:="智能ABC"
#include 双拼编码映射.ahk

中文下启用英文标点:=0							;1为启用,0为禁用.快捷键为ctrl+.
单字模式:=0								;快捷键为f1
启用小词典:=1
输入法开关:=1								;初始打开中文
;自动进入选字模式时间:=500						;两个字母时，自动进入选字的时间，单位为毫秒，越小越灵敏，小心使用。

显示字体 := "华文细黑"							;字体调整过后,排版可能会有些问题,请在下面调分割符和窗口高度宽度

if(显示字体=="华文细黑"){
;	选字窗分割符:="--------------------------------------------------------------------`n"
	初始高度:=54, 初始宽度:=520,单行高度:=21
}else if(显示字体=="微软雅黑"){
;	选字窗分割符:="----------------------------------------------------`n"	
	初始高度:=60, 初始宽度:=550,单行高度:=24
}else{
;	选字窗分割符:="----------------------------------------------`n"
	初始高度:=100, 初始宽度:=540,单行高度:=20
}
gbk单字表 :=生成音词表(".\词典\gbk全字典.txt")				;疯狂输入法特色,包含gbk所有汉字,按计算机编码排序(即gbk2,gbk3,gbk4的顺序放字)
if(!启用小词典){
	词频拼音表1 :=生成音词表(".\词典\正常词典1.txt")
	词频拼音表2 :=生成音词表(".\词典\正常词典2.txt")		;影子输入法拼音词典,(ahk关联数组超过24万,内存载入好像就变慢,所以切分成两个词典)
}else 词频拼音表1 :=生成音词表(".\词典\小词典.txt")
单字模式:=0
字母选字键:="qwertyuiopasdfghjklzxcvbnm"				;所有的字母选字键
数字选字键:="1234567890"						;所有的数字选字键
数字选字键组:=strSplit(数字选字键)
字母选字键组:=strSplit(字母选字键)
中文标点 :={",":"，"  ,  ".":"。"  , ";":"；"  ,  "/":"、" , "+1":"！" , "+2":"@" 	;此处包含除了引号之外的中文标点
		, "+3":"{#}" ,"+4":"￥" , "+5":"%" , "+6":"……" , "+7":"&" 
		, "+8":"*" , "+9":"（" , "+0":"）" ,  "+,":"《" , "+.":"》" 
		, "+/":"？" , "[":"【" , "]":"】" , "+;":"：","+-":"—" }
英文括号按键:={"+9":"(){left}", "+,":"<>{left}",  "[":"[]{left}"	;简化括号的发送问题
		,  "+[":"{{}{}}{left}", "+'":"""""{left}"}
引号已发送:=1								;解决双引号问题
已确认文字:= 插入字符:= 构造词记忆:=用户词典字符:= 待转化字符 := 句末标点 :=gb词典字串 :=常用词典字串:=""
用户词典表:={}, 字母键到字表 :={}, 数字键到词表 :={}
上翻页键 := "-[,", 下翻页键 := "=]."
翻页数:=0, 窗口未显示:=1, 选字状态:=0

#include 获取光标位置.ahk						;调用的函数文件放在这一块

#if
f1::
if(单字模式:=!单字模式){
	tooltip,单字模式,%A_caretx% ,%A_carety% 
}else	tooltip,词语模式,%A_caretx% ,%A_carety% 
settimer,关闭tooltip,-1000
return

^.::
if(中文下启用英文标点:=!中文下启用英文标点){
	tooltip,英文标点,%A_caretx% ,%A_carety%+10
}else	tooltip,中文标点,%A_caretx% ,%A_carety%+10
settimer,关闭tooltip,-1000
return

~Lshift::
keywait,shift,T1							;用此句修正和其他的按键冲突
if(A_thishotkey!="~Lshift")
	return
获取光标位置()
if (输入法开关:=!输入法开关){						;切换中英文
	tooltip, 中,光标位置.x,光标位置.y
	menu,tray,icon,.\图标文件.icl,1
}else{
	if(strlen(待转化字符)>1)						
		send,% 已确认文字 . 待转化字符
	输入置空()
	tooltip,EN,光标位置.x,光标位置.y
	menu,tray,icon,.\图标文件.icl,2					;清空已记录输入
}
setTimer,关闭tooltip,-1000
return

关闭tooltip:
tooltip
return

f2::警告窗开启:=!警告窗开启

msgbox(消息){
	global 警告窗开启
	if(警告窗开启)
		msgbox,% 消息
}

#Include 注册输入键.ahk
;setTimer,超时进入选字状态,off

if(instr(A_thisHotKey,"$")){
	按键 :=subStr(A_thisHotKey,2)					;去除热键$符号,获取热键
}else 按键:=A_thisHotKey
if(输入法开关 && 获取光标位置().类型!="mouse"){
	中文输入(按键)
}else 原义发送(按键)
return

超时进入选字状态:
	选字状态:=1
	gosub,判断发送上屏
return

原义发送(按键){
	global
	if (按键=="backspace"){
		send,{%按键%}
		if(构造词记忆){						
			用户词典表.delete(构造词记忆)					
;			用户词典表.delete(substr(构造词记忆,1,-1))
		}
	}else if (按键=="space"||按键=="enter" ||按键=="esc"||按键=="tab"||按键=="delete" ){
		send,{%按键%}						;特殊按键发送要用 {%按键%}，普通按键发送要用% 按键
	}else if(英文括号按键["" . 按键]){					;简化括号，发送方便打括号
		send,% 英文括号按键["" . 按键]
	}else send,% 按键
}

;输入法核心步骤
中文输入(按键){
	local 选中字,选中词
	字符数:=strLen(待转化字符)
	if(!已确认文字){						;对构造词进行短期记忆
		用户词典字符:=待转化字符
	}
	if(单字模式 && 字符数==1 && instr(字母选字键,按键) ){
		待转化字符 .= 按键, 产生字串(待转化字符), 选字状态:=1
		gosub,判断发送上屏
		return
	}
	if (字符数==0 && !instr(字母选字键,按键) && 按键!="+'"){		;处理非打字状态下的特殊按键，包括符号，排除引号
		if(!中文下启用英文标点 && 中文标点["" . 按键]){
			send,% 中文标点["" . 按键]				;强制转换按键为字符类型，只有这个古怪的语法起作用-_-||……,
		}else 原义发送(按键)
		return
	}else if(instr(数字选字键,按键) ||按键=="space"||按键=="tab"||中文标点["" . 按键]){			;数字及空格等选字键
		if(中文标点["" . 按键]){
			if(instr(下翻页键,按键)||instr(上翻页键,按键) ){	;若标点为句号或逗号，则进行翻页
				if (选字状态) {			
					if(instr(下翻页键,按键)){
						翻页数+=1
					}else if(instr(上翻页键,按键) && 翻页数!=0){
						翻页数-=1
					}
				}else if(!已确认文字 && strlen(待转化字符)==3){	;逗号句号盲打出字
						gosub,盲打出字
						return
				}
			}else 句末标点 := 中文标点["" . 按键]			;非翻页标点,则进入选字
			选字状态:=1
			gosub,判断发送上屏
			return
		}
		选字状态:=1
		if(按键=="tab"){						;在三个字符的情况下,盲打出字
				if(!已确认文字 && strlen(待转化字符)==3){
					gosub,盲打出字
					return
				}
		}else if(按键=="space") {
				if(!选中词:=用户自造词){					;存在用户自造词情况下，使用用户自造词
					选中词:=数字键到词表[1]
				}
		}else 选中词:=数字键到词表[按键]
		if(选中词){
			已确认文字.=选中词
			翻页数:=0
			if(strlen(插入字符)>0){
				插入字符:=substr(插入字符,strlen(选中词)*2+1)
				if(!插入字符){
					插入状态:=0
					产生字串(待转化字符)
				}else 产生字串(插入字符)
			}else {
				待转化字符:=substr(待转化字符,strlen(选中词)*2+1)
				产生字串(待转化字符)
			}
		}
		gosub,判断发送上屏
		return
	}else if(instr(下翻页键,按键)||instr(上翻页键,按键)){		;翻页
		if (instr(下翻页键,按键)){
			翻页数+=1
		}else if(翻页数!=0){					;上翻页
			翻页数-=1
		}else return
		选字状态:=1, 产生候选()
	}else if(按键=="+'"){						;处理引号
		if(字符数==0){
			if(中文下启用英文标点){
				原义发送(按键)
			}else if(引号已发送:=!引号已发送){
				send,”
			}else send,“
		}						
	}else if(按键=="esc"){						;做取消操作
		输入置空()
	}else if(按键=="enter"){						;直接按键上屏
		send,% 已确认文字 . 插入字符 . 待转化字符 . 句末标点
		输入置空()
	}else if(按键=="backspace" ||按键=="delete"){			;做删除操作
		gosub,删除操作
	}else if(!选字状态){						;接下来是字母选字键区
		if(插入状态){
;			if(后删状态){
;				待转化字符 :=substr(待转化字符,1,2-后删状态) . 按键 . substr(待转化字符,2-后删状态+1)
;;				待转化字符 := 按键 . 待转化字符, 
;				产生字串(待转化字符),后删状态-=1
;			}else 
			插入字符.=按键, 产生字串(插入字符)
		}else	待转化字符 .= 按键, 产生字串(待转化字符)
		产生候选()
;		if((strlen(待转化字符)==2||strlen(插入字符)==2) && !单字模式 && 自动进入选字模式时间)
;			setTimer,超时进入选字状态,-%自动进入选字模式时间%
	}else if(选字状态){						;输入法的四个状态：输入状态，选字状态，插入中输入状态，插入中选字状态
		选中字:=字母键到字表[按键]				;好晕@_@
		if(选中字){
			已确认文字.=选中字, 翻页数:=0
			if(strlen(插入字符)>0){
				插入字符:=substr(插入字符,3)
				if(!插入字符){
					插入状态:=0, 产生字串(待转化字符)		;插入选字状态结束，继续转化剩余字串
				}else 产生字串(插入字符)
			}else{
				待转化字符:=substr(待转化字符,3), 产生字串(待转化字符)
			}
			gosub,判断发送上屏
		}else if(!插入字符){
			选字状态:=0, 待转化字符 .= 按键, 词典字串:=产生字串(待转化字符)
			产生候选()
		}
	}
	return

盲打出字:
	产生字串(substr(待转化字符,1,2)), gb词典词组:=strSplit(gb词典字串,","), 位置:=instr(字母选字键,substr(待转化字符,3,1))
	sendinput,% gb词典词组[位置]
	输入置空()
return

删除操作:
	if(插入状态){	
		用户词典字符:=""
		if(按键=="backspace"){
			if(strlen(插入字符)>0){				;插入状态中删除
				插入字符 := subStr(插入字符,1,-1)
				if (strlen(插入字符)>0){
					产生字串(插入字符), 产生候选()
					return
				}
			}else 已确认文字:=substr(已确认文字,1,-1)
		}else if(按键=="delete")
			待转化字符 := subStr(待转化字符,2)		;删除剩余字符的句首字母	
	}else if (strlen(已确认文字)>0){
		if(按键=="backspace"){						;已有确认文字,开始删除
			if(strlen(已确认文字)<=2){		;已确认文字较短情况下
				已确认文字:="", 待转化字符:=用户词典字符
			}else if(!数字键到词表[1]){				;拼不出字的情况下
				if(strlen(待转化字符)!=1){
					待转化字符:=substr(待转化字符,1,1)
				}else 待转化字符:=""
			}else substr(已确认文字,1,-1), 插入状态:=1
		}else if(按键=="delete"){					;delete键删除	
			待转化字符:=subStr(待转化字符,2)
			后删状态:=2, 插入状态:=1
		}
		用户词典字符 :="", 选字状态:=0
	}else if(按键=="backspace"){								;转化前,删除	
			if(!数字键到词表[1]){
				if(strlen(待转化字符)!=1){
					待转化字符:=substr(待转化字符,1,1)
				}else 待转化字符:=""
			}else 待转化字符:=substr(待转化字符,1,-1)
;			if((strlen(待转化字符)==2||strlen(插入字符)==2) && !单字模式 && 自动进入选字模式时间)
;				setTimer,超时进入选字状态,-%自动进入选字模式时间%
	}
	if (!待转化字符){
		send,% 已确认文字 . 句末标点
		输入置空()
		return
	}
	产生字串(待转化字符), 产生候选()
	return
}

判断发送上屏:
	if(!待转化字符){
		if(用户词典字符 && strlen(用户词典字符)>=4 && mod(strlen(用户词典字符),2)==0){		;保存用户构造词
			产生字串(用户词典字符),	词:=strsplit(常用词典字串,",")[1]
			if(用户词典表[用户词典字符] && 用户词典表[用户词典字符]!=已确认文字){
				if(已确认文字==词){
					用户词典表.delete(用户词典字符)
;					用户词典表.delete(substr(用户词典字符,1,-1))
					构造词记忆:=""
				}else 构造词记忆:=用户词典字符
			}else if(词&&词!=已确认文字)
				构造词记忆:=用户词典字符
			if(构造词记忆){
				用户词典表[构造词记忆]:=已确认文字
;				if(strlen(构造词记忆)>=6)
;					用户词典表[substr(构造词记忆,1,-1)]:=已确认文字
				settimer,保存构造词,-2000
			}
		}
		SendInput,% 已确认文字 . 句末标点
		输入置空()
	}else 产生候选()
return

保存构造词:									;两秒内删除,会删除构造词
	构造词记忆:=""
	tooltip,% 构造词记忆
return

产生字串(原字符){
	global 常用词典字串,gb词典字串,词频拼音表1,词频拼音表2,gbk单字表,用户词典表,双拼编码,用户自造词,字母选字键组,启用小词典
	if(用户词典表[原字符]){
		用户自造词:=用户词典表[原字符]
	}else 用户自造词:=""

	待转化字符:=双拼转换(原字符, 双拼编码)
	常用词典字串:=""
	gb词典字串 := gbk单字表[substr(待转化字符,1,2)]
	if(strlen(待转化字符)==1){
		if(词频拼音表1[待转化字符]){
			常用词典字串 .= 词频拼音表1[待转化字符]			
		}else 常用词典字串 .= 词频拼音表2[待转化字符]
		return
	}
	while (strlen(待转化字符)>=2){
		if(mod(strlen(待转化字符),2)==0){		
			if(词频拼音表1[待转化字符]){
				新字串:=词频拼音表1[待转化字符]
			}else 新字串:=词频拼音表2[待转化字符]
			if(常用词典字串 && 新字串)
				常用词典字串 .= ","
			常用词典字串 .= 新字串
			待转化字符:=substr(待转化字符,1,-2)
		}else{	
			if(strlen(待转化字符)>=3){
				if(启用小词典){
					if(词频拼音表1[待转化字符])
						新字串:=词频拼音表1[待转化字符]
					if(常用词典字串 && 新字串)
						常用词典字串 .= ","
					常用词典字串 .= 新字串
				}else{
					构造拼音:=构造词:=""
					loop 26 {
						构造拼音 := 待转化字符 . 字母选字键组[A_index]
						if(构造词){
							if(词频拼音表1[构造拼音]||词频拼音表2[构造拼音]){
								构造词:=""
								break
							}else continue
						}else if(词频拼音表1[构造拼音]){
							构造词组:=词频拼音表1[构造拼音], 构造词:=strsplit(构造词组,",")[1]
						}else if(词频拼音表2[构造拼音])
							构造词组:=词频拼音表2[构造拼音], 构造词:=strsplit(构造词组,",")[1]				
					}
					if(构造词)
						常用词典字串 .= 构造词
				}				
			}
			待转化字符:=substr(待转化字符,1,-1)
		}
	}
}

输入置空(){
	global
	winhide,疯狂输入法选字框
	窗口未显示:=1
	用户词典字符:=用户自造词:=gb词典字串 :=已确认文字:=插入字符 := 待转化字符 := 句末标点 :=""
	后删状态:=插入状态:=选字状态:=翻页数:=0
	字母键到字表 :={}
}

生成音词表(词典路径){							;词典每行格式 拼音\t词,词 
	fileread,已读文件,%词典路径%
	待返回音词表:={}						;哈希数组需要初始化!!!!!!!! 
	loop,parse,已读文件,`n, `r 
	{
		当前行 :=A_LoopField
		loop,parse,当前行,%a_tab%
		{
				if(当前行=="")
					continue
				 if(A_index==1)
					拼音 := a_loopfield
				if (A_index==2)
					待返回音词表[拼音] :=a_loopfield	;提取gb词典字串
		}
		if(mod(a_index,1000) ==0){
			行数:=A_index
			if(词典路径==".\词典\正常词典2.txt"){
				行数+=200000,
				tooltip,正在载入词典%行数%行.......
			}else	tooltip,正在载入词典%行数%行.......
		}
	}
	tooltip,已载入词典.......
	setTimer,关闭tooltip,-300
	已读文件:=""
	return 待返回音词表
}

产生候选(){
	local 显示输入字串,显示候选字串,词频词组
	显示输入字串 .= 已确认文字 . 插入字符
	if(插入状态){
		显示输入字串 .="_  " . 待转化字符 . 句末标点 . ""
	}else 	显示输入字串 .= 待转化字符 . "_"  . 句末标点 . ""
	if(用户自造词){
		显示输入字串 .= "`n◉" . 用户自造词 . " "
	}else 显示输入字串 .="`n"
	词频词组 :=strSplit(常用词典字串,","), gb词典词组:=strSplit(gb词典字串,",")
	较常用字:=""
	for 序号,值 in 词频词组{
		if(序号>15){
			break
		}else 较常用字.=值
	}
	
	for 序号,值 in 数字选字键组{
		字:=数字键到词表[值] :=词频词组[序号+翻页数*strlen(数字选字键)]		;数字做键,词做值
		显示输入字串 .= 值 . "." 
		if (!字){
			显示输入字串 .= "　"
		}else 显示输入字串 .= 字 
		if (序号==10){
			显示输入字串 .= ""
		}else 显示输入字串 .=  " "
	}

;构造字母选字项	
	if(!选字状态){
		gosub,显示候选框
		return
	}
;	显示候选字串 .=选字窗分割符
	for 序号,值 in 字母选字键组
	{
		字母键到字表[值]:=gb词典词组[序号+翻页数*strlen(字母选字键)]	;字母做键,字做值
		字 :=字母键到字表[值]
		if(字 && instr(较常用字,字)){
			显示候选字串 .= "♦" . 值 
		}else 显示候选字串 .= 值 . "."
		if (!字){
			显示候选字串 .= "　"
		}else 显示候选字串 .= 字 
		if (序号==10){
			显示候选字串 .= "`n　" 
		}else if (序号==19){
			显示候选字串 .= "　　`n" 
		} if (序号==26){
			显示候选字串 .= "　　" 
		}else 显示候选字串 .=  " "
	}
	gosub,显示候选框
	return

显示候选框:
	光标位置 :=获取光标位置()
	winget,活动窗口id,ID,A	
	if(绑定窗口id!=活动窗口id){
		Gui, 疯狂输入法选字框:+owner%活动窗口id%		;关键命令, 绑定输入法的窗口到活动窗口,不绑定好像容易出错
		绑定窗口id :=活动窗口id	
	}
	if(窗口未显示){
		if(光标位置.x<A_ScreenWidth -初始宽度){
			窗口x :=光标位置.x
		}else	窗口x :=A_ScreenWidth -初始宽度
		if(光标位置.y<A_ScreenHeight-初始高度){
			窗口y :=光标位置.y
		}else	窗口y :=A_ScreenHeight -初始高度
		if !winexist("疯狂输入法选字框"){								;初始化输入法窗口  
			gui, font, s14, %显示字体%
			Gui, Margin ,10,0
			Gui, +AlwaysOnTop +Disabled -SysMenu +Owner -Caption +Border +Theme
			Gui, Add, Text,% "v输入文本 " "w" 初始宽度 " y2" " h"	单行高度*2, %显示输入字串%
			Gui, Add, pic,% "v分割线 " "w" 初始宽度*0.9 " h1" " x15",%a_workingdir%\分割线.bmp
			Gui, Add, Text,% "v候选文本 " "w" 初始宽度 " center", %显示候选字串%
;			Gui, Add, Text,% "v候选文本 " "w" 初始宽度 "yp+" 单行高度*2 " center", %显示候选字串%
;			Gui, Add, pic,% "v分割线 " "w" 初始宽度*0.9 " h1" "y" 单行高度*2,%a_workingdir%\分割线.bmp
;			guicontrol,move,分割线,% "w" 初始宽度*0.9 
			Gui, Show,x%窗口x% y%窗口y% h%初始高度% w%初始宽度%  NoActivate, 疯狂输入法选字框
		}else {
			GuiControl, , 输入文本 ,%显示输入字串%
			GuiControl, , 候选文本 ,%显示候选字串%
			guicontrol,move,输入文本,% "w" 初始宽度 "h" 单行高度*2
			guicontrol,move,候选文本,% "w" 初始宽度 ;"y" 单行高度*2
;			guicontrol,move,分割线,% "w" 初始宽度*0.9 ;"y" 单行高度*2
			Gui, Show,x%窗口x% y%窗口y% h%初始高度% w%初始宽度%  NoActivate, 疯狂输入法选字框
		}
		窗口未显示:=0
	}else{
		字符数:=0
		loop % strlen(数字选字键){						;宽度计算
			字符数+=strlen(数字键到词表[A_index-1])
		}
		if(strlen(较常用字)>11){
			宽度:=(字符数+3*strlen(数字选字键)+strlen(用户自造词)-10*4)*4+初始宽度
		}else 宽度:=初始宽度
		输入框高度:=单行高度*2
		窗口高度:=初始高度
		if(选字状态){
			候选窗高度:=单行高度*3
		}else 候选窗高度:=0
		窗口高度+=候选窗高度
		guicontrol,move,输入文本,% "w" 宽度 "h" 输入框高度
		guicontrol,move,候选文本,% "w" 宽度 "h" 候选窗高度 ;"y" 输入框高度
		GuiControl, , 输入文本 ,%显示输入字串%
		GuiControl, , 候选文本 ,%显示候选字串%
		guicontrol,move,分割线,% "w" 宽度*0.9 " h1" ;" y" 输入框高度
		WinMove, 疯狂输入法选字框, , , ,%宽度%,% 窗口高度
	}
return
}
^esc::exitapp										;ctrl+esc强制退出


#ifwinactive 输入法gbk版.ahk
~^s::reload 										;在脚本保存后重启脚本