 ;疯狂输入法,哈哈哈.....
#singleinstance force
#NoEnv
SetTitleMatchMode 2
DetectHiddenWindows, On
SetWinDelay, 0

CoordMode,caret,screen
menu,tray,icon,.\图标文件.icl,1

显示字体 := "华文细黑"
输入法开关:=1								;初始打开中文  
中文下启用英文标点:=1
单字模式:=1

gbk单字表 :=生成音词表(".\gbk全字典.txt")				;疯狂输入法特色,包含gbk所有汉字,按计算机编码排序(即gbk2,gbk3,gbk4的顺序放字)
if(!单字模式){
	词频拼音表1 :=生成音词表(".\正常词典1.txt")
	词频拼音表2 :=生成音词表(".\正常词典2.txt")				;拼音词典,来自影子输入法(ahk关联数组超过24万,载入好像就变慢,所以切分成两个词典)
}else 词频拼音表1 :=生成音词表(".\小词典.txt")

字母选字键:="qwertyuiopasdfghjklzxcvbnm"				;所有的字母选字键,勿改
数字选字键:="1234567890"						;所有的数字选字键,亦勿改
数字选字键组:=strSplit(数字选字键)
字母选字键组:=strSplit(字母选字键)
中文标点 :={",":"，"  ,  ".":"。"  , ";":"；"  ,  "/":"、" , "+1":"！" , "+2":"@" 
		, "+3":"#" ,"+4":"￥" , "+5":"%" , "+6":"……" , "+7":"&" 
		, "+8":"*" , "+9":"（" , "+0":"）" ,  "+,":"《" , "+.":"》" 
		, "+/":"？" , "[":"【" , "]":"】" , "+;":"：" }			;此处包含除了引号之外的中文标点
引号已发送:=1								;解决双引号问题
已确认文字:= 插入字符:= 待转化字符 := 句末标点 :=gb词典字串 :=常用词典字串:=""
字母键到字表 :={}
数字键到词表 :={}
上翻页键 := "-[,"								
下翻页键 := "=]."
翻页数:=0
需重建窗口:=1
选字状态:=0
tip条序号:=1

#include 获取光标位置.ahk						;调用的函数文件放在这一块

f1::
if(单字模式:=!单字模式){
	tooltip,单字模式,%A_caretx% ,%A_carety% 
}else	tooltip,词语模式,%A_caretx% ,%A_carety% 
settimer,关闭tooltip,-1000
return

^.::
if(中文下启用英文标点:=!中文下启用英文标点){
	tooltip,英文标点,%A_caretx% ,%A_carety% 
}else	tooltip,中文标点,%A_caretx% ,%A_carety% 
settimer,关闭tooltip,-1000
return

~Lshift::
keywait,shift,t0.15							;修正和其他的按键冲突
if errorlevel
	return
获取光标位置()
if (输入法开关:=!输入法开关){						;输入法开关提示
	tooltip, 中,光标位置.x,光标位置.y
	menu,tray,icon,.\图标文件.icl,1
}else{
	if(strlen(待转化字符)>1)						;改进shift键,使切换时字符上屏
		send,% 已确认文字 . 待转化字符
	输入置空()
	tooltip,EN,光标位置.x,光标位置.y
	menu,tray,icon,.\图标文件.icl,2					;清空已记录输入
}
tip条序号:=1
setTimer,关闭tooltip,-1000
return

关闭tooltip:
tooltip,,,,%tip条序号%
return

#Include 注册输入键.ahk
按键 :=subStr(A_thisHotKey,2)						;去除热键$符号,获取热键
if(输入法开关){
	中文输入(按键)
}else if (按键=="space"||按键=="backspace"||按键=="enter" ||按键=="esc"||按键=="tab"){
	send,{%按键%}
}else send,% 按键							;有的按键发送要用 % 按键  ,有的要用 {%按键%}	没有规律……
return

;输入法核心步骤
中文输入(按键){
	local 选中字,选中词
	字符数:=strLen(待转化字符)
	if(单字模式 && 字符数==1 && instr(字母选字键,按键) ){
		待转化字符 .= 按键
		产生字串(待转化字符)
		选字状态:=1
		gosub,判断发送上屏
		return
	}
	if (字符数==0 && !instr(字母选字键,按键) && 按键!="+'"){		;处理非打字状态下的特殊按键，包括符号，排除引号
		if(!中文下启用英文标点 && 中文标点["" . 按键]){
			send,% 中文标点["" . 按键]			;强制转换按键为字符类型，只有这个古怪的语法起作用-_-||……,
		}else if (按键=="space"||按键=="backspace"||按键=="enter" ||按键=="esc" ||按键=="tab"){
			send,{%按键%}
		}else send,% 按键
		return
	}else if(instr(数字选字键,按键) ||按键=="space"||按键=="tab"||中文标点[按键]){			;数字及空格等选字键
		if(中文标点[按键]){
			if(选字状态){	
				if (instr(下翻页键,按键)){					;若标点为句号或逗号,可进行翻页
					翻页数+=1
				}else if(instr(上翻页键,按键)){					
					if(翻页数!=0){
						翻页数-=1
					}
				}else 句末标点 := 中文标点["" . 按键]
			}else 句末标点 := 中文标点["" . 按键]
			选字状态:=1
			gosub,判断发送上屏
			return
		}
		选字状态:=1
		if(按键=="tab"){
		}else if(按键=="space") {
			选中词:=数字键到词表[1]
		}else 选中词:=数字键到词表[按键]
		if(选中词){
			已确认文字.=选中词
			翻页数:=0
			if(strlen(插入字符)>0){
				插入字符:=substr(插入字符,strlen(选中词)*2+1)
				if(strlen(插入字符)==0){
					插入状态:=0
					产生字串(待转化字符)
				}else 产生字串(插入字符)
			}else {
				待转化字符:=substr(待转化字符,strlen(选中词)*2+1)
				产生字串(待转化字符)
			}
		}
		gosub,判断发送上屏
		return
	}else if(instr(下翻页键,按键)||instr(上翻页键,按键)){		;翻页
		if (instr(下翻页键,按键)){
			翻页数+=1
		}else if(翻页数!=0){					;上翻页
			翻页数-=1
		}else return
		选字状态:=1
		产生候选()
		return
	}else if(按键=="+'"){						;处理引号
		if(字符数==0){
			if(中文下启用英文标点){
				send,% 按键
			}else if(引号已发送:=!引号已发送){
				send,”
			}else send,“
			return
		}else return						;可以做开始转化......等下做
	}else if(按键=="esc"){						;做取消操作
		输入置空()
		return
	}else if(按键=="enter"){						;直接按键上屏
		send,% 已确认文字 . 插入字符 . 待转化字符 . 句末标点
		输入置空()
		return
	}else if(按键=="backspace"){					;做删除操作
;		return		;没想好怎么做,先return
		gosub,删除操作
	}else if(!选字状态){						;接下来是字母选字键区
		if(插入状态){
			插入字符.=按键
			产生字串(插入字符)
		}else {
			待转化字符 .= 按键
			产生字串(待转化字符)
;			tooltip,% 常用词典字串
		}
		产生候选()
	}else if(选字状态){						;输入法的四个状态：输入状态，选字状态，插入中输入状态，插入中选字状态
		选中字:=字母键到字表[按键]				;我自己都晕@_@
		if(!选中字){ 
			return
		}else{
			已确认文字.=选中字
			翻页数:=0
			if(strlen(插入字符)>0){
				插入字符:=substr(插入字符,3)
				if(strlen(插入字符)==0){
					插入状态:=0
					产生字串(待转化字符)		;插入选字状态结束，继续转化剩余字串
				}else 产生字串(插入字符)
			}else{
				待转化字符:=substr(待转化字符,3)
				产生字串(待转化字符)
			}
			gosub,判断发送上屏
		}
	}
	return

判断发送上屏:
	if(strlen(待转化字符)==0){
		SendInput,% 已确认文字 . 句末标点
		输入置空()
	}else 产生候选()
return

删除操作:
	if (strlen(已确认文字)>0){						;可能是插入状态
		if(strlen(插入字符)>0){
			插入字符 := subStr(插入字符,1,-1)
			if (strlen(插入字符)>0){
				产生字串(插入字符)
				产生候选()
				return
			}
		}else {
			待转化字符 := subStr(待转化字符,3)		;开始进入插入状态,删除剩余字符的句首字母
			选字状态:=0
			插入状态:=1
		}
	}else {								;输入状态的删除
		待转化字符 := subStr(待转化字符,1,-2)
	}
	if (strlen(待转化字符)==0){
		send,% 已确认文字 . 句末标点
		输入置空()
		return
	}
	产生字串(待转化字符)
	产生候选()
return
}

产生字串(待转化字符){
	global 常用词典字串,gb词典字串,词频拼音表1,词频拼音表2,gbk单字表
	常用词典字串:=""
	gb词典字串 := gbk单字表[substr(待转化字符,1,2)]
	if(strlen(待转化字符)==1){
		if(词频拼音表1[待转化字符]){
			常用词典字串 .= 词频拼音表1[待转化字符]			
		}else 常用词典字串 .= 词频拼音表2[待转化字符]
		return
	}
	while (strlen(待转化字符)>=2){
		if(mod(strlen(待转化字符),2)==0){		
			if(词频拼音表1[待转化字符]){
				新字串:=词频拼音表1[待转化字符]
			}else 新字串:=词频拼音表2[待转化字符]
			if(常用词典字串 && 新字串){
				常用词典字串 .= ","
			}
			常用词典字串 .= 新字串
			待转化字符:=substr(待转化字符,1,-2)
;			tooltip,% 待转化字符	
		}else{
			待转化字符:=substr(待转化字符,1,-1)
		}
	}
}

输入置空(){
	global
	Winkill,疯狂输入法选字框
	需重建窗口:=1
	gb词典字串 :=已确认文字:=插入字符 := 待转化字符 := 句末标点 :=""
	插入状态:=选字状态:=翻页数:=0
	字母键到字表 :={}
}

生成音词表(词典路径){							;词典每行格式 拼音\t词,词 
	fileread,已读文件,%词典路径%
	待返回音词表:={}						;哈希数组需要初始化!!!!!!!!
	loop,parse,已读文件,`n, `r 
	{
		当前行 :=A_LoopField
		loop,parse,当前行,%a_tab%
		{
				if(当前行==""){
					continue
				}
				 if(A_index==1){
					拼音 := a_loopfield
				}
				if (A_index==2){
					待返回音词表[拼音] :=a_loopfield	;提取gb词典字串
				}
		}
		if(mod(a_index,1000) ==0){
			行数:=A_index
			if(词典路径==".\正常词典2.txt"){
				行数+=200000,
				tooltip,正在载入%行数%行.......
			}else	tooltip,正在载入%行数%行.......
		}
	}
	tooltip,已载入词典.......
	setTimer,关闭tooltip,-300
	已读文件:=""
	return 待返回音词表
}

产生候选(){
	local 显示输入字串,显示候选字串,词频词组
	显示输入字串 .= 已确认文字 . 插入字符
	if(插入状态){
		显示输入字串 .="_  " . 待转化字符 . 句末标点
	}else 显示输入字串 .= 待转化字符 . "_"  . 句末标点
	词频词组 :=strSplit(常用词典字串,",")	
	gb词典词组:=strSplit(gb词典字串,",")
	for 序号,值 in 字母选字键组
		字母键到字表[值]:=gb词典词组[序号+翻页数*26]		;检测和字母选区重合的字
	for 序号,值 in 数字选字键组{
		字:=数字键到词表[值] :=词频词组[序号+翻页数*10]	;数字做键,词做值
		if(选字状态){
			for k,字母 in 字母选字键组{
				if (字母键到字表[字母]==字)
					值:=字母,break
			}
		}		
		显示候选字串 .= 值 . "." 
		if (!字){
			显示候选字串 .= "　"
		}else 显示候选字串 .= 字 
		if (序号==10){
			显示候选字串 .= "`n "
		}else 显示候选字串 .=  " "
		if (翻页数==0)
			第一页常用字 .= 字
	}
	显示候选字串 .="--------------------------------------------------------------------`n"

;构造字母选字项	
	if(!选字状态){
		gosub,显示候选框
		return
	}
	for 序号,值 in 字母选字键组
	{
		字 :=字母键到字表[值]				; :=gb词典词组[序号+翻页数*26]	;
		if(翻页数!=0 && 字!="" && instr(第一页常用字,字)){
			显示候选字串 .= "♦" . 值 
		}else 显示候选字串 .= 值 . "."
		
		if (!字){
			显示候选字串 .= "　"
		}else 显示候选字串 .= 字 
		if (序号==10){
			显示候选字串 .= "`n　" 
		}else if (序号==19){
			显示候选字串 .= "　　`n" 
		} if (序号==26){
			显示候选字串 .= "　　" 
		}else 显示候选字串 .=  " "
	}
	gosub,显示候选框
	return

显示候选框:
	光标位置 :=获取光标位置()
	winget,活动窗口id,ID,A	
	if(绑定窗口id!=活动窗口id){
		Gui, 疯狂输入法选字框:+owner%活动窗口id%		;关键命令,太有用了!!!!!! 
		绑定窗口id :=活动窗口id	
	}
	if(需重建窗口){ 						
		窗口x :=光标位置.x,窗口y :=光标位置.y
		SplashImage,,x%窗口x% y%窗口y% b1 h145 w520 c10 fm14 fs14 wm400 ws400,%显示候选字串%,%显示输入字串%,疯狂输入法选字框,%显示字体%
		需重建窗口:=0
	}else{ 
		ControlSetText , static1, %显示输入字串%, 疯狂输入法选字框
		ControlSetText , static2, %显示候选字串%, 疯狂输入法选字框
	}

return
}

^esc::exitapp

#ifwinactive 输入法gbk版.ahk
~^s::reload 								;在脚本保存后重启脚本  